from typing import Any

from . import widgets as widgets
from .fields import Field as Field
from .instance_loaders import ModelInstanceLoader as ModelInstanceLoader
from .results import Error as Error, Result as Result, RowResult as RowResult
from .utils import atomic_if_using_transaction as atomic_if_using_transaction

logger: Any

def get_related_model(field: Any) -> Any: ...
def has_natural_foreign_key(model: Any) -> Any: ...

class ResourceOptions:
    model: Any
    fields: Any
    exclude: Any
    instance_loader_class: Any
    import_id_fields: Any
    export_order: Any
    widgets: Any
    use_transactions: Any
    skip_unchanged: bool
    report_skipped: bool
    clean_model_instances: bool
    chunk_size: Any
    skip_diff: bool
    skip_html_diff: bool
    use_bulk: bool
    batch_size: int
    force_init_instance: bool
    using_db: Any
    store_row_values: bool
    use_natural_foreign_keys: bool

class DeclarativeMetaclass(type):
    def __new__(cls, name: Any, bases: Any, attrs: Any) -> Any: ...

class Diff:
    left: Any
    right: Any
    new: Any
    def __init__(self, resource: Any, instance: Any, new: Any) -> None: ...
    def compare_with(self, resource: Any, instance: Any, dry_run: bool = ...) -> None: ...
    def as_html(self) -> Any: ...

class Resource(metaclass=DeclarativeMetaclass):
    fields: Any
    create_instances: Any
    update_instances: Any
    delete_instances: Any
    def __init__(self, **kwargs: Any) -> None: ...
    @classmethod
    def get_result_class(self) -> Any: ...
    @classmethod
    def get_row_result_class(self) -> Any: ...
    @classmethod
    def get_error_result_class(self) -> Any: ...
    @classmethod
    def get_diff_class(self) -> Any: ...
    @classmethod
    def get_db_connection_name(self) -> Any: ...
    def get_use_transactions(self) -> Any: ...
    def get_chunk_size(self) -> Any: ...
    def get_fields(self, **kwargs: Any) -> Any: ...
    def get_field_name(self, field: Any) -> Any: ...
    def init_instance(self, row: Any | None = ...) -> None: ...
    def get_instance(self, instance_loader: Any, row: Any) -> Any: ...
    def get_or_init_instance(self, instance_loader: Any, row: Any) -> Any: ...
    def get_import_id_fields(self) -> Any: ...
    def get_bulk_update_fields(self) -> Any: ...
    def bulk_create(self, using_transactions: Any, dry_run: Any, raise_errors: Any, batch_size: Any | None = ..., result: Any | None = ...) -> None: ...
    def bulk_update(self, using_transactions: Any, dry_run: Any, raise_errors: Any, batch_size: Any | None = ..., result: Any | None = ...) -> None: ...
    def bulk_delete(self, using_transactions: Any, dry_run: Any, raise_errors: Any, result: Any | None = ...) -> None: ...
    def validate_instance(self, instance: Any, import_validation_errors: Any | None = ..., validate_unique: bool = ...) -> None: ...
    def save_instance(self, instance: Any, is_create: Any, using_transactions: bool = ..., dry_run: bool = ...) -> None: ...
    def before_save_instance(self, instance: Any, using_transactions: Any, dry_run: Any) -> None: ...
    def after_save_instance(self, instance: Any, using_transactions: Any, dry_run: Any) -> None: ...
    def delete_instance(self, instance: Any, using_transactions: bool = ..., dry_run: bool = ...) -> None: ...
    def before_delete_instance(self, instance: Any, dry_run: Any) -> None: ...
    def after_delete_instance(self, instance: Any, dry_run: Any) -> None: ...
    def import_field(self, field: Any, obj: Any, data: Any, is_m2m: bool = ..., **kwargs: Any) -> None: ...
    def get_import_fields(self) -> Any: ...
    def import_obj(self, obj: Any, data: Any, dry_run: Any, **kwargs: Any) -> None: ...
    def save_m2m(self, obj: Any, data: Any, using_transactions: Any, dry_run: Any) -> None: ...
    def for_delete(self, row: Any, instance: Any) -> Any: ...
    def skip_row(self, instance: Any, original: Any, row: Any, import_validation_errors: Any | None = ...) -> Any: ...
    def get_diff_headers(self) -> Any: ...
    def before_import(self, dataset: Any, using_transactions: Any, dry_run: Any, **kwargs: Any) -> None: ...
    def after_import(self, dataset: Any, result: Any, using_transactions: Any, dry_run: Any, **kwargs: Any) -> None: ...
    def before_import_row(self, row: Any, row_number: Any | None = ..., **kwargs: Any) -> None: ...
    def after_import_row(self, row: Any, row_result: Any, row_number: Any | None = ..., **kwargs: Any) -> None: ...
    def after_import_instance(self, instance: Any, new: Any, row_number: Any | None = ..., **kwargs: Any) -> None: ...
    def handle_import_error(self, result: Any, error: Any, raise_errors: bool = ...) -> None: ...
    def import_row(self, row: Any, instance_loader: Any, using_transactions: bool = ..., dry_run: bool = ..., raise_errors: Any | None = ..., **kwargs: Any) -> Any: ...
    def import_data(self, dataset: Any, dry_run: bool = ..., raise_errors: bool = ..., use_transactions: Any | None = ..., collect_failed_rows: bool = ..., rollback_on_validation_errors: bool = ..., **kwargs: Any) -> Any: ...
    def import_data_inner(self, dataset: Any, dry_run: Any, raise_errors: Any, using_transactions: Any, collect_failed_rows: Any, rollback_on_validation_errors: Any | None = ..., **kwargs: Any) -> Any: ...
    def get_export_order(self) -> Any: ...
    def before_export(self, queryset: Any, *args: Any, **kwargs: Any) -> None: ...
    def after_export(self, queryset: Any, data: Any, *args: Any, **kwargs: Any) -> None: ...
    def export_field(self, field: Any, obj: Any) -> Any: ...
    def get_export_fields(self) -> Any: ...
    def export_resource(self, obj: Any) -> Any: ...
    def get_export_headers(self) -> Any: ...
    def get_user_visible_headers(self) -> Any: ...
    def get_user_visible_fields(self) -> Any: ...
    def iter_queryset(self, queryset: Any) -> None: ...
    def export(self, *args: Any, queryset: Any | None = ..., **kwargs: Any) -> Any: ...

class ModelDeclarativeMetaclass(DeclarativeMetaclass):
    def __new__(cls, name: Any, bases: Any, attrs: Any) -> Any: ...

class ModelResource(Resource, metaclass=ModelDeclarativeMetaclass):
    DEFAULT_RESOURCE_FIELD = Field
    WIDGETS_MAP: Any
    @classmethod
    def get_m2m_widget(cls, field: Any) -> Any: ...
    @classmethod
    def get_fk_widget(cls, field: Any) -> Any: ...
    @classmethod
    def widget_from_django_field(cls, f: Any, default: Any=...) -> Any: ...
    @classmethod
    def widget_kwargs_for_field(self, field_name: Any) -> Any: ...
    @classmethod
    def field_from_django_field(cls, field_name: Any, django_field: Any, readonly: Any) -> Any: ...
    def get_queryset(self) -> Any: ...
    def init_instance(self, row: Any | None = ...) -> Any: ...
    def after_import(self, dataset: Any, result: Any, using_transactions: Any, dry_run: Any, **kwargs: Any) -> None: ...
    @classmethod
    def get_display_name(cls) -> Any: ...

def modelresource_factory(model: Any, resource_class: Any=...) -> Any: ...
