from typing import Any, Generic, Iterable, Optional, Self, TypeVar
from django.core.checks.messages import CheckMessage
from django.db import models

_M = TypeVar("_M", bound=models.Model)

def get_lookup_value(obj: _M, field: str) -> Optional[_M]: ...

class OrderedModelQuerySet(models.QuerySet[_M]):
    def get_max_order(self) -> int: ...
    def get_min_order(self) -> int: ...
    def get_next_order(self) -> int: ...
    def above(self, order: int, inclusive: bool = ...) -> Self: ...
    def above_instance(self, ref: _M, inclusive: bool = ...) -> Self: ...
    def below(self, order: int, inclusive: bool = ...) -> Self: ...
    def below_instance(self, ref: _M, inclusive: bool = ...) -> Self: ...
    def decrease_order(self, **extra_kwargs: Any) -> int: ...
    def increase_order(self, **extra_kwargs: Any) -> int: ...
    def bulk_create(self, objs: Iterable[_M], *args: Any, **kwargs: Any) -> list[_M]: ...

class OrderedModelManager(models.Manager[_M]): ...

class OrderedModelBase(models.Model, Generic[_M]):
    objects: models.Manager[_M]
    order_field_name: Optional[str]
    order_with_respect_to: Optional[tuple[str, ...] | str]
    order_class_path: Optional[str]

    class Meta:
        abstract: bool
    def __init__(self, *args: Any, **kwargs: Any) -> None: ...
    @classmethod
    def get_order_with_respect_to(cls) -> tuple[str, ...]: ...
    def get_ordering_queryset(
        self, qs: Optional[models.QuerySet[_M]] = ..., wrt: Optional[dict[str, Any]] = ...
    ) -> models.QuerySet[_M]: ...
    def previous(self) -> Self: ...
    def next(self) -> Self: ...
    def save(self, *args: Any, **kwargs: Any) -> None: ...
    def delete(self, *args: Any, extra_update: Optional[dict[str, Any]] = ..., **kwargs: Any) -> None: ...  # type: ignore
    def swap(self, replacement: Self) -> None: ...
    def up(self) -> None: ...
    def down(self) -> None: ...
    def to(self, order: int, extra_update: Optional[dict[str, Any]] = ...) -> None: ...
    def above(self, ref: Self, extra_update: Optional[dict[str, Any]] = ...) -> None: ...
    def below(self, ref: Self, extra_update: Optional[dict[str, Any]] = ...) -> None: ...
    def top(self, extra_update: Optional[dict[str, Any]] = ...) -> None: ...
    def bottom(self, extra_update: Optional[dict[str, Any]] = ...) -> None: ...
    @classmethod
    def check(cls, **kwargs: Any) -> list[CheckMessage]: ...

class OrderedModel(OrderedModelBase):
    order: int

    class Meta:
        abstract: bool
        ordering: tuple[str, ...]
