from typing import Any


class Error:
    error: Any
    traceback: Any
    row: Any
    def __init__(self, error: Any, traceback: Any | None = ..., row: Any | None = ...) -> None: ...

class RowResult:
    IMPORT_TYPE_UPDATE: str
    IMPORT_TYPE_NEW: str
    IMPORT_TYPE_DELETE: str
    IMPORT_TYPE_SKIP: str
    IMPORT_TYPE_ERROR: str
    IMPORT_TYPE_INVALID: str
    valid_import_types: Any
    errors: Any
    validation_error: Any
    diff: Any
    import_type: Any
    row_values: Any
    object_id: Any
    object_repr: Any
    def __init__(self) -> None: ...
    def add_instance_info(self, instance: Any) -> None: ...

class InvalidRow:
    number: Any
    error: Any
    values: Any
    error_dict: Any
    def __init__(self, number: Any, validation_error: Any, values: Any) -> None: ...
    @property
    def field_specific_errors(self) -> Any: ...
    @property
    def non_field_specific_errors(self) -> Any: ...
    @property
    def error_count(self) -> Any: ...

class Result:
    base_errors: Any
    diff_headers: Any
    rows: Any
    invalid_rows: Any
    failed_dataset: Any
    totals: Any
    total_rows: int
    def __init__(self, *args: Any, **kwargs: Any) -> None: ...
    def valid_rows(self) -> Any: ...
    def append_row_result(self, row_result: Any) -> None: ...
    def append_base_error(self, error: Any) -> None: ...
    def add_dataset_headers(self, headers: Any) -> None: ...
    def append_failed_row(self, row: Any, error: Any) -> None: ...
    def append_invalid_row(self, number: Any, row: Any, validation_error: Any) -> None: ...
    def increment_row_result_total(self, row_result: Any) -> None: ...
    def row_errors(self) -> Any: ...
    def has_errors(self) -> Any: ...
    def has_validation_errors(self) -> Any: ...
    def __iter__(self) -> Any: ...
